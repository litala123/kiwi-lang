WHITESPACE = _{ " " | "\t" | NEWLINE }
SINGLE_COMMENT_T = @{ "//" }
MULTI_COMMENT_OPEN_T = @{ "/*" }
MULTI_COMMENT_CLOSE_T = @{ "*/" }
MULTI_COMMENT = {
    (MULTI_COMMENT_OPEN_T ~ (!MULTI_COMMENT_OPEN_T ~ !MULTI_COMMENT_CLOSE_T ~ ANY)* ~ MULTI_COMMENT* ~ (!MULTI_COMMENT_OPEN_T ~ !MULTI_COMMENT_CLOSE_T ~ ANY)* ~ MULTI_COMMENT_CLOSE_T)
}
COMMENT = _{
    MULTI_COMMENT |
    (SINGLE_COMMENT_T ~ (!SINGLE_COMMENT_T ~ !"\n" ~ ANY)* ~ "\n")
}

LPAREN = @{ "(" }
RPAREN = @{ ")" }
LSQUARE = @{ "[" }
RSQUARE = @{ "]" }
LBRACK = @{ "{" }
RBRACK = @{ "}" }

PLUS = @{ "+" }
MIN = @{ "-" }
MULT = @{ "*" }
DIV = @{ "/" }
MOD = @{ "%" }
NOT = @{ "!" }

ASSIGN = @{ "=" }
ASSIGN_DECL = @{ ":=" }
ASSIGN_PLUS = @{ "+=" }
ASSIGN_MIN = @{ "-=" }
ASSIGN_MULT = @{ "*=" }
ASSIGN_DIV = @{ "/=" }

EQUALS = @{ "==" }
NEQUALS = @{ "!=" }
GT = @{ ">" }
GTE = @{ ">=" }
LT = @{ "<" }
LTE = @{ "<=" }
OR = @{ "||" }
AND = @{ "&&" }

SQUOTE = @{ "'" }
DQUOTE = @{ "\"" }
BACK_TICK = @{ "`" }

SEMI = @{ ";" }
COLON = @{ ":" }
PERIOD = @{ "." }
COMMA = @{ "," }
UNDERSCORE = @{ "_" }

LET_K = @{ "let" }
FUN_K = @{ "fn" }
IMPORT_K = @{ "import" }
RET_K = @{ "return" }
STRUCT_K = @{ "struct" }
LOOP_K = @{ "loop" }

INT_T = @{ "int" }
FLOAT_T = @{ "float" }
BOOL_T = @{ "bool" }
STRING_T = @{ "string" }
TRUE_K = @{ "true" }
FALSE_K = @{ "false" }

ident = @{ !ASCII_DIGIT ~ (ASCII_ALPHANUMERIC | UNDERSCORE)+ }

var_type = { INT_T | FLOAT_T | BOOL_T | STRING_T | (STRUCT_K ~ ident) }

arith_op = { PLUS | MIN | MULT | DIV | MOD }
log_op = { EQUALS | NEQUALS | GT | GTE | LT | LTE | OR | AND }
assign_op = { ASSIGN | ASSIGN_PLUS | ASSIGN_MIN | ASSIGN_MULT | ASSIGN_DIV }

int_specifier = @{ "i" | "u" }

int_literal = ${ MIN? ~ ASCII_DIGIT+ ~ int_specifier? }
float_literal = ${ MIN? ~ ASCII_DIGIT+ ~ PERIOD ~ ASCII_DIGIT+ ~ ("f")? }
string_literal = ${
    (SQUOTE ~ (!SQUOTE ~ ANY)* ~ SQUOTE) |
    (DQUOTE ~ (!DQUOTE ~ ANY)* ~ DQUOTE) |
    (BACK_TICK ~ (!BACK_TICK ~ ANY)* ~ BACK_TICK)
}

factor = { (LPAREN ~ arith_expr ~ RPAREN) | term }
md_expr = { (factor ~ MULT ~ md_expr) | (factor ~ DIV ~ md_expr) | factor}
arith_expr = { (md_expr ~ PLUS ~ arith_expr) | (md_expr ~ MIN ~ arith_expr) | md_expr }

cond_factor = { (LPAREN ~ cond_expr ~ RPAREN) | term }
lowest_expr = { (NOT ~ cond_factor) | cond_factor }
and_expr = { (lowest_expr ~ AND ~ and_expr) | (lowest_expr ~ AND ~ and_expr) | lowest_expr}
cond_expr = { (and_expr ~ OR ~ cond_expr) | (and_expr ~ OR ~ cond_expr) | and_expr }

string_expr = {
    (LPAREN ~ string_expr ~ RPAREN) |
    (string_literal ~ PLUS ~ string_expr) |
    string_literal
}

term = {
    ident |
    float_literal |
    int_literal |
    func_call
}

expr = {
    arith_expr |
    cond_expr |
    string_expr |
    term
}

func_call = { ident ~ LPAREN ~ fc_arg_list ~ RPAREN }

stmt = {
    (LET_K ~ ident ~ COLON ~ var_type ~ assign_op ~ expr ~ SEMI) |
    (LET_K ~ ident ~ ASSIGN_DECL ~ expr ~ SEMI) |
    (ident ~ assign_op ~ expr ~ SEMI) |
    (RET_K ~ expr ~ SEMI) |
    (func_call ~ SEMI)
}

fd_arg = { ident ~ COLON ~ var_type }
fc_arg = { expr }

fd_arg_list = { (fd_arg ~ (COMMA ~ fd_arg)*)? }
fc_arg_list = { (fc_arg ~ (COMMA ~ fc_arg)*)? }

func_decl = {
    FUN_K ~ ident ~ LPAREN ~ fd_arg_list ~ RPAREN ~ LBRACK ~ stmt* ~ RBRACK
}

import_stmt = { IMPORT_K ~ string_literal ~ SEMI }

file = { SOI ~ import_stmt* ~ func_decl* ~ EOI }
